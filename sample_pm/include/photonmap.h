//-------------------------------------------------------------------------------------------------
// File : photonmap.h
// Desc : Photon map data structure.
// Copyright(c) Project Asura. All right reserved.
//-------------------------------------------------------------------------------------------------
#pragma once

//-------------------------------------------------------------------------------------------------
// Includes
//-------------------------------------------------------------------------------------------------
#include <r3d_math.h>
#include <r3d_stack_allocator.h>
#include <vector>
#include <queue>


///////////////////////////////////////////////////////////////////////////////////////////////////
// Photon structure
///////////////////////////////////////////////////////////////////////////////////////////////////
struct Photon
{
    Vector3     pos;    //!< 位置座標.
    Vector3     flux;   //!< 放射束.
};


///////////////////////////////////////////////////////////////////////////////////////////////////
// PhotonMap class
///////////////////////////////////////////////////////////////////////////////////////////////////
class PhotonMap
{
    //=============================================================================================
    // list of friend classes and methods.
    //=============================================================================================
    /* NOTHING */

public:
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // QueryResult structure
    ///////////////////////////////////////////////////////////////////////////////////////////////
    struct QueryResult
    {
        const Photon*   photon;
        double          dist;

        bool operator < (const QueryResult& value) const
        { return dist < value.dist; }
    };

    using QueryArray  = std::vector<QueryResult>;
    using QueryQueue  = std::priority_queue<QueryResult, QueryArray>;
    using PhotonArray = std::vector<Photon>;

    //=============================================================================================
    // public variables.
    //=============================================================================================
    /* NOTHING */

    //=============================================================================================
    // public methods.
    //=============================================================================================

    //---------------------------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //---------------------------------------------------------------------------------------------
    PhotonMap();

    //---------------------------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //---------------------------------------------------------------------------------------------
    ~PhotonMap();

    //---------------------------------------------------------------------------------------------
    //! @brief      kd-treeを構築します.
    //---------------------------------------------------------------------------------------------
    void build();

    //---------------------------------------------------------------------------------------------
    //! @brief      破棄処理を行います.
    //---------------------------------------------------------------------------------------------
    void clear();

    //---------------------------------------------------------------------------------------------
    //! @brief      フォトン数を取得します.
    //---------------------------------------------------------------------------------------------
    size_t size() const;

    //---------------------------------------------------------------------------------------------
    //! @brief      フォントマップに格納します.
    //!
    //! @param[in]      pos     フォトンの位置座標.
    //! @param[in]      flux    フォトンの放射束.
    //---------------------------------------------------------------------------------------------
    void store(const Vector3& pos, const Vector3& flux);

    //---------------------------------------------------------------------------------------------
    //! @brief      最近傍フォトンを検索します.
    //!
    //! @param[in]      pos         フォトン位置です.
    //! @param[in]      max_dist    最大検索半径です.
    //! @param[out]     query       クエリ結果格納先です.
    //---------------------------------------------------------------------------------------------
    void search(
        const Vector3&  pos, 
        double          max_dist,
        size_t          count,
        QueryQueue&     result);

private:
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Node structure
    ///////////////////////////////////////////////////////////////////////////////////////////////
    struct Node
    {
        Photon*     value;
        Node*       left;
        Node*       right;
        int         axis;

        Node()
        : value(nullptr)
        , left (nullptr)
        , right(nullptr)
        { /* DO_NOTHING*/ }
    };

    //=============================================================================================
    // private variables.
    //=============================================================================================
    PhotonArray     m_photons;
    Node*           m_root;

    Node* recusrive_build(PhotonArray::iterator begin, PhotonArray::iterator end, int depth);
    void  recursive_clear(Node* node);
    void  recursive_search(const Vector3& pos, double& max_dist, size_t count, Node* node, QueryQueue& result);
};